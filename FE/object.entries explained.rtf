{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\fmodern\fcharset0 Courier;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u55358 \u56800  You have:\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs26 \cf0 \
const groupedWishes = \{\
  alice: [/* wish1, wish2 */],\
  bob: [/* wish3 */]\
\};\
\pard\pardeftab720\sa240\partightenfactor0

\f2\fs24 \cf0 But you can\'92t 
\f1\fs26 map()
\f2\fs24  over an object directly \'97 only arrays can be mapped in JavaScript.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 \uc0\u9989  So, you use:\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs26 \cf0 \
Object.entries(groupedWishes)\
\pard\pardeftab720\sa240\partightenfactor0

\f2\fs24 \cf0 This converts the object into an array of 
\f1\fs26 [key, value]
\f2\fs24  pairs:\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0 \
[\
  ["alice", [/* wish1, wish2 */]],\
  ["bob", [/* wish3 */]]\
]\
\pard\pardeftab720\sa240\partightenfactor0

\f2\fs24 \cf0 Each item in that array is a 
\f0\b 2-element array
\f2\b0 , so you can use 
\f0\b array destructuring
\f2\b0  to unpack them like this:\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf0 \
.map(([owner, wishes]) => \{\
  // owner = "alice"\
  // wishes = [wish1, wish2]\
\})\
}